{
  "installed_libraries": [
    {
      "library": {
        "name": "DoubleResetDetector_Generic",
        "author": "Khoi Hoang",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "Library to detect a double reset, using EEPROM, DueFlashStorage, FlashStorage_SAMD, FlashStorage_RTL8720, FlashStorage_STM32 or LittleFS/InternalFS. For AVR, Teensy, SAM DUE, SAMD, STM32F/L/H/G/WB/MP1, nRF52, RP2040-based Nano_RP2040_Connect, RASPBERRY_PI_PICO, RTL8720DN, MBED nRF52840-based Nano_33_BLE, Portenta_H7, etc. boards. Now using efficient FlashStorage_STM32 library and supporting new RP2040-based Nano_RP2040_Connect, Portenta_H7, RASPBERRY_PI_PICO and STM32 core v2.0.0",
        "paragraph": "An alternative start-up mode can be used. One example is to allow re-configuration of Blynk and/or WiFi, MQTT, ThingStream Credentials.",
        "website": "https://github.com/khoih-prog/DoubleResetDetector_Generic",
        "category": "Device Control",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/DoubleResetDetector_Generic",
        "source_dir": "/home/louis/Arduino/libraries/DoubleResetDetector_Generic/src",
        "version": "1.8.1",
        "license": "MIT",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/DoubleResetDetector_Generic/examples/checkWaitingDRD",
          "/home/louis/Arduino/libraries/DoubleResetDetector_Generic/examples/minimal"
        ],
        "provides_includes": [
          "DoubleResetDetector_Generic.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "FlashStorage_STM32",
        "author": "Khoi Hoang",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "The FlashStorage_STM32 library aims to provide a convenient way to store and retrieve user data using the non-volatile flash memory of STM32F/L/H/G/WB/MP1. It is using the buffered read and write to minimize the access to Flash. It now supports writing and reading the whole object, not just byte-and-byte. New STM32 core v2.0.0+ is also supported now.",
        "paragraph": "Useful if the EEPROM is not available or too small. Currently, STM32F/L/H/G/WB/MP1 are supported.",
        "website": "https://github.com/khoih-prog/FlashStorage_STM32",
        "category": "Data Storage",
        "architectures": [
          "stm32",
          "ststm32"
        ],
        "install_dir": "/home/louis/Arduino/libraries/FlashStorage_STM32",
        "source_dir": "/home/louis/Arduino/libraries/FlashStorage_STM32/src",
        "version": "1.2.0",
        "license": "MIT",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_CRC",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_Clear",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_get",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_iteration",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_put",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_read",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_update",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EEPROM_write",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/EmulateEEPROM",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/FlashStoreAndRetrieve",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/StoreNameAndSurname",
          "/home/louis/Arduino/libraries/FlashStorage_STM32/examples/multiFileProject"
        ],
        "provides_includes": [
          "FlashStorage_STM32.h",
          "FlashStorage_STM32.hpp"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Functional-Vlpp",
        "author": "Khoi Hoang",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "Provides function templates to better support C++ functional programming across platforms.",
        "paragraph": "Provides common C++ construction, including string operation / generic container / linq, function templates to better support C++ functional programming across platforms",
        "website": "https://github.com/khoih-prog/functional-vlpp",
        "category": "Other",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Functional-Vlpp",
        "source_dir": "/home/louis/Arduino/libraries/Functional-Vlpp/src",
        "version": "1.0.2",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "provides_includes": [
          "Basic.h",
          "Function.h",
          "Pointer.h",
          "functional-vlpp.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit STMPE610",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Arduino library for STMPE610/811 resistive touch screen controllers",
        "paragraph": "Arduino library for STMPE610/811 resistive touch screen controllers",
        "website": "https://github.com/adafruit/Adafruit_STMPE610",
        "category": "Display",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_STMPE610",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_STMPE610",
        "version": "1.1.6",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_STMPE610/examples/TouchTest"
        ],
        "provides_includes": [
          "Adafruit_STMPE610.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "AsyncTCP",
        "author": "dvarrel",
        "maintainer": "dvarrel",
        "sentence": "Async TCP Library for ESP32. Forked from https://github.com/me-no-dev/AsyncTCP",
        "paragraph": "to build a WebServer, with files saved in flash",
        "website": "https://github.com/dvarrel/AsyncTCP",
        "category": "Communication",
        "architectures": [
          "esp32"
        ],
        "install_dir": "/home/louis/Arduino/libraries/AsyncTCP",
        "source_dir": "/home/louis/Arduino/libraries/AsyncTCP/src",
        "version": "1.1.4",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "provides_includes": [
          "AsyncTCP.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ArduinoQueue",
        "author": "Einar Arnason \u003ceinsiarna@gmail.com\u003e",
        "maintainer": "Einar Arnason \u003ceinsiarna@gmail.com\u003e",
        "sentence": "Queue Library",
        "paragraph": "A lightweight linked list type queue implementation, meant for microcontrollers.",
        "website": "https://github.com/EinarArnason/ArduinoQueue",
        "category": "Data Processing",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ArduinoQueue",
        "source_dir": "/home/louis/Arduino/libraries/ArduinoQueue",
        "version": "1.2.5",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/ArduinoQueue/examples/intQueueItemsSize",
          "/home/louis/Arduino/libraries/ArduinoQueue/examples/intQueueMemSize"
        ],
        "provides_includes": [
          "ArduinoQueue.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "DallasTemperature",
        "author": "Miles Burton \u003cmiles@mnetcs.com\u003e, Tim Newsome \u003cnuisance@casualhacker.net\u003e, Guil Barros \u003cgfbarros@bappos.com\u003e, Rob Tillaart \u003crob.tillaart@gmail.com\u003e",
        "maintainer": "Miles Burton \u003cmiles@mnetcs.com\u003e",
        "sentence": "Arduino Library for Dallas Temperature ICs",
        "paragraph": "Supports DS18B20, DS18S20, DS1822, DS1820",
        "website": "https://github.com/milesburton/Arduino-Temperature-Control-Library",
        "category": "Sensors",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/DallasTemperature",
        "source_dir": "/home/louis/Arduino/libraries/DallasTemperature",
        "version": "3.9.0",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Alarm",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/AlarmHandler",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/ExternalPullup",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Multibus_simple",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Multiple",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/SaveRecallScratchPad",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/SetUserData",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Simple",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Single",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Tester",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/Timing",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/TwoPin_DS18B20",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/UserDataDemo",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/UserDataWriteBatch",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/WaitForConversion",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/WaitForConversion2",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/oneWireSearch",
          "/home/louis/Arduino/libraries/DallasTemperature/examples/readPowerSupply"
        ],
        "provides_includes": [
          "DallasTemperature.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ESPAsyncTCP",
        "author": "dvarrel",
        "maintainer": "dvarrel",
        "sentence": "Async TCP Library for ESP8266 and ESP31B . Forked from https://github.com/me-no-dev/ESPAsyncTCP",
        "paragraph": "tp build a WebServer, with files saved in flash",
        "website": "https://github.com/dvarrel/ESPAsyncTCP",
        "category": "Communication",
        "architectures": [
          "esp8266",
          "esp31b"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ESPAsyncTCP",
        "source_dir": "/home/louis/Arduino/libraries/ESPAsyncTCP/src",
        "version": "1.2.4",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/ESPAsyncTCP/examples/ClientServer/Client",
          "/home/louis/Arduino/libraries/ESPAsyncTCP/examples/ClientServer/Server",
          "/home/louis/Arduino/libraries/ESPAsyncTCP/examples/SyncClient"
        ],
        "provides_includes": [
          "AsyncPrinter.h",
          "DebugPrintMacros.h",
          "ESPAsyncTCP.h",
          "ESPAsyncTCPbuffer.h",
          "SyncClient.h",
          "async_config.h",
          "tcp_axtls.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Ethernet",
        "author": "Various (see AUTHORS file for details)",
        "maintainer": "Arduino \u003cinfo@arduino.cc\u003e",
        "sentence": "Enables network connection (local and Internet) using the Arduino Ethernet Board or Shield.",
        "paragraph": "With this library you can use the Arduino Ethernet (shield or board) to connect to Internet. The library provides both client and server functionalities. The library permits you to connect to a local network also with DHCP and to resolve DNS.",
        "website": "https://www.arduino.cc/en/Reference/Ethernet",
        "category": "Communication",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Ethernet",
        "source_dir": "/home/louis/Arduino/libraries/Ethernet/src",
        "version": "2.0.2",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/Ethernet/examples/AdvancedChatServer",
          "/home/louis/Arduino/libraries/Ethernet/examples/BarometricPressureWebServer",
          "/home/louis/Arduino/libraries/Ethernet/examples/ChatServer",
          "/home/louis/Arduino/libraries/Ethernet/examples/DhcpAddressPrinter",
          "/home/louis/Arduino/libraries/Ethernet/examples/DhcpChatServer",
          "/home/louis/Arduino/libraries/Ethernet/examples/LinkStatus",
          "/home/louis/Arduino/libraries/Ethernet/examples/PagerServer",
          "/home/louis/Arduino/libraries/Ethernet/examples/TelnetClient",
          "/home/louis/Arduino/libraries/Ethernet/examples/UDPSendReceiveString",
          "/home/louis/Arduino/libraries/Ethernet/examples/UdpNtpClient",
          "/home/louis/Arduino/libraries/Ethernet/examples/WebClient",
          "/home/louis/Arduino/libraries/Ethernet/examples/WebClientRepeating",
          "/home/louis/Arduino/libraries/Ethernet/examples/WebServer"
        ],
        "provides_includes": [
          "Ethernet.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "HC_SR04",
        "author": "bjoernboeckle",
        "maintainer": "bjoernboeckle",
        "sentence": "Allows an Arduino board to use multiple HCSR04 module.",
        "paragraph": "This library allows measuring multiple HCSR04 sensors synchron and asynchron.",
        "website": "https://github.com/bjoernboeckle/HC_SR04.git",
        "category": "Sensors",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/HC_SR04",
        "source_dir": "/home/louis/Arduino/libraries/HC_SR04/src",
        "version": "1.0.1",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/HC_SR04/examples/Async_Sync",
          "/home/louis/Arduino/libraries/HC_SR04/examples/Async_Sync_Multiple",
          "/home/louis/Arduino/libraries/HC_SR04/examples/Simple",
          "/home/louis/Arduino/libraries/HC_SR04/examples/Simple_async",
          "/home/louis/Arduino/libraries/HC_SR04/examples/Simple_async_multiple",
          "/home/louis/Arduino/libraries/HC_SR04/examples/Simple_multiple"
        ],
        "provides_includes": [
          "HC_SR04.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "List",
        "author": "Niklas Kaaf \u003cnkaaf@protonmail.com\u003e",
        "maintainer": "Niklas Kaaf \u003cnkaaf@protonmail.com\u003e",
        "sentence": "The Ultimate Collection of Lists",
        "paragraph": "This library extends the Arduino ecosystem with the functionality of several easy-to-use lists for numerous purposes.",
        "website": "https://github.com/nkaaf/Arduino-List",
        "category": "Data Storage",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/List",
        "source_dir": "/home/louis/Arduino/libraries/List/src",
        "version": "3.0.1",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/List/examples/List/DifferenceMutableAndImmutable",
          "/home/louis/Arduino/libraries/List/examples/List/ManageElements",
          "/home/louis/Arduino/libraries/List/examples/List/UtilsAndHelper"
        ],
        "provides_includes": [
          "List.hpp"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "LinkedList",
        "author": "Ivan Seidel \u003civanseidel@gmail.com\u003e",
        "maintainer": "Ivan Seidel \u003civanseidel@gmail.com\u003e",
        "sentence": "A fully implemented LinkedList made to work with Arduino projects",
        "paragraph": "The objective of this library is to create a pattern for projects. If you need to use a List of: int, float, objects, Lists or Wales. This is what you are looking for.",
        "website": "https://github.com/ivanseidel/LinkedList",
        "category": "Data Processing",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/LinkedList",
        "source_dir": "/home/louis/Arduino/libraries/LinkedList",
        "version": "1.3.3",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/LinkedList/examples/ClassList",
          "/home/louis/Arduino/libraries/LinkedList/examples/SimpleIntegerList",
          "/home/louis/Arduino/libraries/LinkedList/examples/Sort"
        ],
        "provides_includes": [
          "LinkedList.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit BusIO",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "This is a library for abstracting away I2C and SPI interfacing",
        "paragraph": "This is a library for abstracting away I2C and SPI interfacing",
        "website": "https://github.com/adafruit/Adafruit_BusIO",
        "category": "Signal Input/Output",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_BusIO",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_BusIO",
        "version": "1.16.1",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/i2c_address_detect",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/i2c_readwrite",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/i2c_registers",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/i2corspi_register",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/spi_modetest",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/spi_readwrite",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/spi_register_bits",
          "/home/louis/Arduino/libraries/Adafruit_BusIO/examples/spi_registers"
        ],
        "provides_includes": [
          "Adafruit_BusIO_Register.h",
          "Adafruit_I2CDevice.h",
          "Adafruit_I2CRegister.h",
          "Adafruit_SPIDevice.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit Circuit Playground",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "All in one library to control Adafruit's Circuit Playground board.",
        "paragraph": "All in one library to control Adafruit's Circuit Playground board.",
        "website": "https://github.com/adafruit/Adafruit_CircuitPlayground",
        "category": "Other",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground",
        "utility_dir": "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/utility",
        "version": "1.12.0",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/CircuitPlaygroundFirmata",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/CircuitPlaygroundFirmata_Express_CodeOrg",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/FidgetSpinner",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_Accelerometer",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_Blink",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_Buttons",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_LightSensor",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_NeoPixels",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_SlideSwitch",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_SoundSensor",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_Speaker",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Hello_CircuitPlayground/Hello_Temperature",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Infrared_Demos/Infrared_NeoPixel",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Infrared_Demos/Infrared_Read",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Infrared_Demos/Infrared_Record",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Infrared_Demos/Infrared_Send",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Infrared_Demos/Infrared_Testpattern",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Microphone_Demos/Birthday_Candles",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Microphone_Demos/mic_FFT_classic",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Microphone_Demos/mic_FFT_express",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Microphone_Demos/pretty_meter",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Microphone_Demos/soundPressureLevel",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Microphone_Demos/vu_meter",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/ScratchSensorBoard",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Speech_Demos/Talk_UK_Acorn",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Speech_Demos/Talk_US_Clock",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Speech_Demos/Talk_US_Large",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Speech_Demos/Talk_US_Male",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/Speech_Demos/Talk_US_TI99",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/accelTap",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/accel_mouse",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/analog_sensors",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/color_sense",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/comm_badge",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/demo",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/external_neopixels",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/mega_demo",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/tachometer",
          "/home/louis/Arduino/libraries/Adafruit_Circuit_Playground/examples/tachometer_led_display"
        ],
        "provides_includes": [
          "Adafruit_CircuitPlayground.h",
          "Adafruit_Circuit_Playground.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "L298N",
        "author": "Andrea Lombardo",
        "maintainer": "Andrea Lombardo",
        "sentence": "L298N library for Arduino",
        "paragraph": "An easy way to control DC Motors with Arduino and the L298N module.",
        "website": "https://github.com/AndreaLombardo/L298N",
        "category": "Device Control",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/L298N",
        "source_dir": "/home/louis/Arduino/libraries/L298N/src",
        "version": "2.0.3",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/L298N/examples/L298N-Callback",
          "/home/louis/Arduino/libraries/L298N/examples/L298N-Fade",
          "/home/louis/Arduino/libraries/L298N/examples/L298N-No-Enable",
          "/home/louis/Arduino/libraries/L298N/examples/L298N-Simple",
          "/home/louis/Arduino/libraries/L298N/examples/L298NX2-Callback",
          "/home/louis/Arduino/libraries/L298N/examples/L298NX2-Fade",
          "/home/louis/Arduino/libraries/L298N/examples/L298NX2-No-Enable",
          "/home/louis/Arduino/libraries/L298N/examples/L298NX2-Simple",
          "/home/louis/Arduino/libraries/L298N/examples/L298NX2-Two-Callback"
        ],
        "provides_includes": [
          "L298N.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "OneWire",
        "author": "Jim Studt, Tom Pollard, Robin James, Glenn Trewitt, Jason Dangel, Guillermo Lovato, Paul Stoffregen, Scott Roberts, Bertrik Sikken, Mark Tillotson, Ken Butcher, Roger Clark, Love Nystrom",
        "maintainer": "Paul Stoffregen",
        "sentence": "Access 1-wire temperature sensors, memory and other chips.",
        "website": "http://www.pjrc.com/teensy/td_libs_OneWire.html",
        "category": "Communication",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/OneWire",
        "source_dir": "/home/louis/Arduino/libraries/OneWire",
        "version": "2.3.8",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/OneWire/examples/DS18x20_Temperature",
          "/home/louis/Arduino/libraries/OneWire/examples/DS2408_Switch",
          "/home/louis/Arduino/libraries/OneWire/examples/DS250x_PROM"
        ],
        "provides_includes": [
          "OneWire.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "MicroTuple",
        "author": "Nitrof \u003chttps://github.com/NitrofMtl\u003e",
        "maintainer": "Nitrof \u003chttps://github.com/NitrofMtl\u003e",
        "sentence": "A library tuple like variadic datastructure for arduino.",
        "paragraph": "Support simple callback with any type and number arguments.",
        "website": "https://github.com/NitrofMtl/MicroTuple",
        "category": "Uncategorized",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/MicroTuple",
        "source_dir": "/home/louis/Arduino/libraries/MicroTuple",
        "version": "1.0",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "provides_includes": [
          "MicroTuple.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "STM32duino LwIP",
        "author": "Adam Dunkels \u003cadam@sics.se\u003e",
        "maintainer": "See url",
        "sentence": "A Lightweight TCP/IP stack",
        "paragraph": "lwIP is a small independent implementation of the TCP/IP protocol suite that has been developed by Adam Dunkels at the Computer and Networks Architectures (CNA) lab at the Swedish Institute of Computer Science (SICS). The focus of the lwIP TCP/IP implementation is to reduce the RAM usage while still having a full scale TCP. This making lwIP suitable for use in embedded systems with tens of kilobytes of free RAM and room for around 40 kilobytes of code ROM. Note: modified by ST.",
        "website": "http://git.savannah.gnu.org/cgit/lwip.git",
        "category": "Communication",
        "architectures": [
          "stm32"
        ],
        "install_dir": "/home/louis/Arduino/libraries/STM32duino_LwIP",
        "source_dir": "/home/louis/Arduino/libraries/STM32duino_LwIP/src",
        "version": "2.1.3",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "provides_includes": [
          "LwIP.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit GPS Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "An interrupt-based GPS library for no-parsing-required use",
        "paragraph": "An interrupt-based GPS library for no-parsing-required use",
        "website": "https://github.com/adafruit/Adafruit_GPS",
        "category": "Sensors",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_GPS_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_GPS_Library/src",
        "version": "1.7.5",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_EchoTest",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_LOCUS_DumpBasic",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_LOCUS_Erase",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_LOCUS_Start",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_LOCUS_Status",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_Parsing",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_HardwareSerial_Timing",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_I2C_EchoTest",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_I2C_OLEDdebug",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_I2C_Parsing",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SPI_EchoTest",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SoftwareSerial_EchoTest",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SoftwareSerial_LOCUS_DumpBasic",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SoftwareSerial_LOCUS_Erase",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SoftwareSerial_LOCUS_Start",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SoftwareSerial_LOCUS_Status",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/GPS_SoftwareSerial_Parsing",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/NMEA_EXTENSIONS",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/blank",
          "/home/louis/Arduino/libraries/Adafruit_GPS_Library/examples/shield_sdlog"
        ],
        "provides_includes": [
          "Adafruit_GPS.h",
          "Adafruit_PMTK.h",
          "NMEA_data.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit Zero DMA Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "DMA helper/wrapped for ATSAMD21 such as Arduino Zero \u0026 Feather M0",
        "paragraph": "DMA helper/wrapped for ATSAMD21 such as Arduino Zero \u0026 Feather M0",
        "website": "https://github.com/adafruit/Adafruit_ZeroDMA",
        "category": "Signal Input/Output",
        "architectures": [
          "samd"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library",
        "utility_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library/utility",
        "version": "1.1.3",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library/examples/zerodma_adc",
          "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library/examples/zerodma_memcpy",
          "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library/examples/zerodma_spi1",
          "/home/louis/Arduino/libraries/Adafruit_Zero_DMA_Library/examples/zerodma_spi2"
        ],
        "provides_includes": [
          "Adafruit_ZeroDMA.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit GFX Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Adafruit GFX graphics core library, this is the 'core' class that all our other graphics libraries derive from.",
        "paragraph": "Install this library in addition to the display library for your hardware.",
        "website": "https://github.com/adafruit/Adafruit-GFX-Library",
        "category": "Display",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_GFX_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_GFX_Library",
        "version": "1.11.9",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_GFX_Library/examples/GFXcanvas",
          "/home/louis/Arduino/libraries/Adafruit_GFX_Library/examples/mock_ili9341"
        ],
        "provides_includes": [
          "Adafruit_GFX.h",
          "Adafruit_GrayOLED.h",
          "Adafruit_SPITFT.h",
          "Adafruit_SPITFT_Macros.h",
          "gfxfont.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit SleepyDog Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Arduino library to use the watchdog timer for system reset and low power sleep.",
        "paragraph": "Arduino library to use the watchdog timer for system reset and low power sleep.",
        "website": "https://github.com/adafruit/Adafruit_SleepyDog",
        "category": "Other",
        "architectures": [
          "avr",
          "samd",
          "nrf52",
          "teensy",
          "esp32",
          "esp8266",
          "rp2040"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_SleepyDog_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_SleepyDog_Library",
        "utility_dir": "/home/louis/Arduino/libraries/Adafruit_SleepyDog_Library/utility",
        "version": "1.6.5",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_SleepyDog_Library/examples/BasicUsage",
          "/home/louis/Arduino/libraries/Adafruit_SleepyDog_Library/examples/Sleep"
        ],
        "provides_includes": [
          "Adafruit_SleepyDog.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit TouchScreen",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Adafruit TouchScreen display library.",
        "paragraph": "Adafruit TouchScreen display library.",
        "website": "https://github.com/adafruit/Adafruit_TouchScreen",
        "category": "Display",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_TouchScreen",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_TouchScreen",
        "version": "1.1.5",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_TouchScreen/examples/touchscreendemo",
          "/home/louis/Arduino/libraries/Adafruit_TouchScreen/examples/touchscreendemoshield"
        ],
        "provides_includes": [
          "TouchScreen.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ArduinoJson",
        "author": "Benoit Blanchon \u003cblog.benoitblanchon.fr\u003e",
        "maintainer": "Benoit Blanchon \u003cblog.benoitblanchon.fr\u003e",
        "sentence": "A simple and efficient JSON library for embedded C++.",
        "paragraph": "⭐ 6624 stars on GitHub! Supports serialization, deserialization, MessagePack, streams, filtering, and more. Fully tested and documented.",
        "website": "https://arduinojson.org/?utm_source=meta\u0026utm_medium=library.properties",
        "category": "Data Processing",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ArduinoJson",
        "source_dir": "/home/louis/Arduino/libraries/ArduinoJson/src",
        "version": "7.1.0",
        "license": "MIT",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonConfigFile",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonFilterExample",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonGeneratorExample",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonHttpClient",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonParserExample",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonServer",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/JsonUdpBeacon",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/MsgPackParser",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/ProgmemExample",
          "/home/louis/Arduino/libraries/ArduinoJson/examples/StringExample"
        ],
        "provides_includes": [
          "ArduinoJson.h",
          "ArduinoJson.hpp"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit ILI9341",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Library for Adafruit ILI9341 displays",
        "paragraph": "Library for Adafruit ILI9341 displays",
        "website": "https://github.com/adafruit/Adafruit_ILI9341",
        "category": "Display",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_ILI9341",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_ILI9341",
        "version": "1.6.1",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/breakouttouchpaint",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/graphicstest",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/graphicstest_featherwing",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/graphicstest_pyportal",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/mandelbrot",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/onoffbutton",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/onoffbutton_breakout",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/pictureEmbed",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/pyportal_boing",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/touchpaint",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/touchpaint_featherwing",
          "/home/louis/Arduino/libraries/Adafruit_ILI9341/examples/touchpaint_pyportal"
        ],
        "provides_includes": [
          "Adafruit_ILI9341.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit Zero FFT Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "FFT library for Arduino Zero / Adafruit Feather M0 (SAMD21 processor).",
        "paragraph": "FFT library for the Arduino Zero / Adafruit Feather M0 (SAMD21 processor).",
        "website": "https://github.com/adafruit/Adafruit_ZeroFFT",
        "category": "Signal Input/Output",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library",
        "version": "1.0.6",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library/examples/CircuitPlayground",
          "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library/examples/fft_test",
          "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library/examples/mic_tft",
          "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library/examples/normalized",
          "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library/examples/pdm_tft",
          "/home/louis/Arduino/libraries/Adafruit_Zero_FFT_Library/examples/pdm_tft_fancy"
        ],
        "provides_includes": [
          "Adafruit_ZeroFFT.h",
          "arm_common_tables.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ESPAsyncWebServer",
        "author": "lacamera",
        "maintainer": "lacamera",
        "sentence": "Async Web Server for ESP8266 and ESP32",
        "paragraph": "A fork of the ESPAsyncWebServer library maintained by ESPHome",
        "website": "https://github.com/lacamera/ESPAsyncWebServer",
        "category": "Communication",
        "architectures": [
          "esp8266",
          "esp32"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ESPAsyncWebServer",
        "source_dir": "/home/louis/Arduino/libraries/ESPAsyncWebServer/src",
        "version": "3.1.0",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/ESPAsyncWebServer/examples/CaptivePortal",
          "/home/louis/Arduino/libraries/ESPAsyncWebServer/examples/regex_patterns",
          "/home/louis/Arduino/libraries/ESPAsyncWebServer/examples/simple_server"
        ],
        "provides_includes": [
          "AsyncEventSource.h",
          "AsyncJson.h",
          "AsyncWebSocket.h",
          "AsyncWebSynchronization.h",
          "ESPAsyncWebServer.h",
          "StringArray.h",
          "WebAuthentication.h",
          "WebHandlerImpl.h",
          "WebResponseImpl.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "FlashStorage_STM32F1",
        "author": "Khoi Hoang",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "The FlashStorage_STM32F1 library aims to provide a convenient way to store and retrieve user's data using the non-volatile flash memory of STM32F1/F3. It's using the buffered read and write to minimize the access to Flash. It now supports writing and reading the whole object, not just byte-and-byte. New STM32 core v2.0.0+ is supported now.",
        "paragraph": "Useful if the EEPROM is not available or too small. Currently, STM32F1/F3 are supported.",
        "website": "https://github.com/khoih-prog/FlashStorage_STM32F1",
        "category": "Data Storage",
        "architectures": [
          "stm32",
          "ststm32"
        ],
        "install_dir": "/home/louis/Arduino/libraries/FlashStorage_STM32F1",
        "source_dir": "/home/louis/Arduino/libraries/FlashStorage_STM32F1/src",
        "version": "1.1.0",
        "license": "GPLv3",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_CRC",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_Clear",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_get",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_iteration",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_put",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_read",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_update",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EEPROM_write",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/EmulateEEPROM",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/FlashStoreAndRetrieve",
          "/home/louis/Arduino/libraries/FlashStorage_STM32F1/examples/multiFileProject"
        ],
        "provides_includes": [
          "FlashStorage_STM32F1.h",
          "FlashStorage_STM32F1.hpp"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "WiFi",
        "author": "Arduino",
        "maintainer": "Arduino \u003cinfo@arduino.cc\u003e",
        "sentence": "Enables network connection (local and Internet) using the Arduino WiFi shield.",
        "paragraph": "With this library you can instantiate Servers, Clients and send/receive UDP packets through WiFi. The shield can connect either to open or encrypted networks (WEP, WPA). The IP address can be assigned statically or through a DHCP. The library can also manage DNS.",
        "website": "http://www.arduino.cc/en/Reference/WiFi",
        "category": "Communication",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/WiFi",
        "source_dir": "/home/louis/Arduino/libraries/WiFi/src",
        "version": "1.2.7",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/WiFi/examples/ConnectNoEncryption",
          "/home/louis/Arduino/libraries/WiFi/examples/ConnectWithWEP",
          "/home/louis/Arduino/libraries/WiFi/examples/ConnectWithWPA",
          "/home/louis/Arduino/libraries/WiFi/examples/ScanNetworks",
          "/home/louis/Arduino/libraries/WiFi/examples/SimpleWebServerWiFi",
          "/home/louis/Arduino/libraries/WiFi/examples/WiFiChatServer",
          "/home/louis/Arduino/libraries/WiFi/examples/WiFiUdpNtpClient",
          "/home/louis/Arduino/libraries/WiFi/examples/WiFiUdpSendReceiveString",
          "/home/louis/Arduino/libraries/WiFi/examples/WiFiWebClient",
          "/home/louis/Arduino/libraries/WiFi/examples/WiFiWebClientRepeating",
          "/home/louis/Arduino/libraries/WiFi/examples/WiFiWebServer"
        ],
        "provides_includes": [
          "WiFi.h",
          "WiFiClient.h",
          "WiFiServer.h",
          "WiFiUdp.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "FlashStorage_RTL8720",
        "author": "Khoi Hoang",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "The FlashStorage_RTL8720 library aims to provide a convenient way to store and retrieve user data using the non-volatile flash memory of Realtek RTL8720DN, RTL8722DM, RTM8722CSM, etc.",
        "paragraph": "It is using the buffered read and write to minimize the access to Flash. It now supports writing and reading the whole object, not just byte-and-word.",
        "website": "https://github.com/khoih-prog/FlashStorage_RTL8720",
        "category": "Data Storage",
        "architectures": [
          "AmebaD"
        ],
        "install_dir": "/home/louis/Arduino/libraries/FlashStorage_RTL8720",
        "source_dir": "/home/louis/Arduino/libraries/FlashStorage_RTL8720/src",
        "version": "1.1.0",
        "license": "MIT",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_CRC",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_Clear",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_get",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_iteration",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_put",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_read",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_update",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStorage_write",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/FlashStoreAndRetrieve",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/StoreNameAndSurname",
          "/home/louis/Arduino/libraries/FlashStorage_RTL8720/examples/multiFileProject"
        ],
        "provides_includes": [
          "FlashStorage_RTL8720.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ArduinoSTL",
        "author": "Mike Matera \u003cmatera@lifealgorithmic.com\u003e, Chris Johnson \u003cchrisjohnsonmail@gmail.com\u003e, Arduino",
        "maintainer": "Mike Matera \u003cmatera@lifealgorithmic.com\u003e",
        "sentence": "A port of uClibc++ Arduino library.",
        "paragraph": "This library includes important C++ functions, including cout and cin, printf and scanf. It also includes STL containers like vector and algorithm.",
        "website": "https://github.com/mike-matera/ArduinoSTL",
        "category": "Other",
        "architectures": [
          "avr",
          "megaavr"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ArduinoSTL",
        "source_dir": "/home/louis/Arduino/libraries/ArduinoSTL/src",
        "version": "1.3.3",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "provides_includes": [
          "ArduinoSTL.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "DHT sensor library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Arduino library for DHT11, DHT22, etc Temp \u0026 Humidity Sensors",
        "paragraph": "Arduino library for DHT11, DHT22, etc Temp \u0026 Humidity Sensors",
        "website": "https://github.com/adafruit/DHT-sensor-library",
        "category": "Sensors",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/DHT_sensor_library",
        "source_dir": "/home/louis/Arduino/libraries/DHT_sensor_library",
        "version": "1.4.6",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/DHT_sensor_library/examples/DHT_Unified_Sensor",
          "/home/louis/Arduino/libraries/DHT_sensor_library/examples/DHTtester"
        ],
        "provides_includes": [
          "DHT.h",
          "DHT_U.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ESPAsyncHTTPUpdateServer",
        "author": "Mohammad Mahdi Nazari \u003cipdotsetaf@gmail.com\u003e",
        "maintainer": "Mohammad Mahdi Nazari \u003cipdotsetaf@gmail.com\u003e",
        "sentence": "Simple/Stylized  HTTP Update Server for ESPAsyncWebServer(by me-no-dev)",
        "paragraph": "This library lets you to update Firmware/FileSystem of ESP32/ESP8266 OTA(Over The Air) from a web page.",
        "website": "https://github.com/IPdotSetAF/ESPAsyncHTTPUpdateServer",
        "category": "Other",
        "architectures": [
          "esp8266",
          "esp32"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ESPAsyncHTTPUpdateServer",
        "source_dir": "/home/louis/Arduino/libraries/ESPAsyncHTTPUpdateServer/src",
        "version": "2.0.0",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/ESPAsyncHTTPUpdateServer/examples/simple_server"
        ],
        "provides_includes": [
          "ESPAsyncHTTPUpdateServer.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "FlashStorage_SAMD",
        "author": "Cristian Maglie \u003cc.maglie@bug.st\u003e, Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "The FlashStorage library aims to provide a convenient way to store and retrieve user's data using the non-volatile flash memory of SAMD21/SAMD51. It's using the buffered read and write to minimize the access to Flash. It now supports writing and reading the whole object, not just byte-and-byte.",
        "paragraph": "Useful if the EEPROM is not available or too small. Currently, ATSAMD21 and ATSAMD51 are supported (and consequently every board based on this cpu like the Arduino Zero, Aduino MKR1000, Nano-33 IoT, Itsy-Bitsy M4, etc).",
        "website": "https://github.com/khoih-prog/FlashStorage_SAMD",
        "category": "Data Storage",
        "architectures": [
          "samd"
        ],
        "install_dir": "/home/louis/Arduino/libraries/FlashStorage_SAMD",
        "source_dir": "/home/louis/Arduino/libraries/FlashStorage_SAMD/src",
        "version": "1.3.2",
        "license": "GPLv3",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_CRC",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_Clear",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_get",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_iteration",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_put",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_read",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_update",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EEPROM_write",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/EmulateEEPROM",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/FlashStoreAndRetrieve",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/StoreNameAndSurname",
          "/home/louis/Arduino/libraries/FlashStorage_SAMD/examples/multiFileProject"
        ],
        "provides_includes": [
          "FlashStorage_SAMD.h",
          "FlashStorage_SAMD.hpp",
          "FlashAsEEPROM_SAMD.h",
          "FlashAsEEPROM_SAMD.hpp"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit LED Backpack Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Adafruit LED Backpack Library for our 8x8 matrix and 7-segment LED backpacks",
        "paragraph": "Adafruit LED Backpack Library for our 8x8 matrix and 7-segment LED backpacks",
        "website": "https://github.com/adafruit/Adafruit_LED_Backpack",
        "category": "Display",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library",
        "version": "1.5.1",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/HT16K33",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/bargraph24",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/bicolor8x8",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/clock_sevenseg_ds1307",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/clock_sevenseg_gps",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/custom_character/custom_character_generator",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/custom_character/customgen",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/matrix16x8",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/matrix8x8",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/minimatrix16x8",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/quadalphaanimation",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/quadalphanum",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/quadalphanum_mini",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/roboface",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/sevenseg",
          "/home/louis/Arduino/libraries/Adafruit_LED_Backpack_Library/examples/wavface"
        ],
        "provides_includes": [
          "Adafruit_LEDBackpack.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit Zero PDM Library",
        "author": "Adafruit",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "PDM Microphone Input library for Arduino Zero / Adafruit Feather M0 (SAMD21 processor).",
        "paragraph": "PDM Microphone Input library for the Arduino Zero / Adafruit Feather M0 (SAMD21 processor).",
        "website": "https://github.com/adafruit/Adafruit_ZeroPDM",
        "category": "Signal Input/Output",
        "architectures": [
          "samd"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_PDM_Library",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_Zero_PDM_Library",
        "version": "1.2.3",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_Zero_PDM_Library/examples/pdm_analogout",
          "/home/louis/Arduino/libraries/Adafruit_Zero_PDM_Library/examples/pdm_analogout_dma",
          "/home/louis/Arduino/libraries/Adafruit_Zero_PDM_Library/examples/spipdm_analogout"
        ],
        "provides_includes": [
          "Adafruit_ZeroPDM.h",
          "Adafruit_ZeroPDMSPI.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "Adafruit Unified Sensor",
        "author": "Adafruit \u003cinfo@adafruit.com\u003e",
        "maintainer": "Adafruit \u003cinfo@adafruit.com\u003e",
        "sentence": "Required for all Adafruit Unified Sensor based libraries.",
        "paragraph": "A unified sensor abstraction layer used by many Adafruit sensor libraries.",
        "website": "https://github.com/adafruit/Adafruit_Sensor",
        "category": "Sensors",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/Adafruit_Unified_Sensor",
        "source_dir": "/home/louis/Arduino/libraries/Adafruit_Unified_Sensor",
        "version": "1.1.14",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "examples": [
          "/home/louis/Arduino/libraries/Adafruit_Unified_Sensor/examples/sensortest"
        ],
        "provides_includes": [
          "Adafruit_Sensor.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "ESP8266TimerInterrupt",
        "author": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "This library enables you to use Interrupt from Hardware Timers on an ESP8266-based board.",
        "paragraph": "These ESP8266 Hardware Timers, using Interrupt, still work even if other functions are blocking. Moreover, they are much more precise (certainly depending on clock frequency accuracy) than other software timers using millis() or micros(). That's mandatory if you need to measure some data requiring better accuracy. It now supports 16 ISR-based Timers, while consuming only 1 Hardware Timer. Timers' interval is very long (ulong millisecs). The most important feature is they're ISR-based Timers. Therefore, their executions are not blocked by bad-behaving functions or tasks. This important feature is absolutely necessary for mission-critical tasks.",
        "website": "https://github.com/khoih-prog/ESP8266TimerInterrupt",
        "category": "Device Control",
        "architectures": [
          "esp8266"
        ],
        "install_dir": "/home/louis/Arduino/libraries/ESP8266TimerInterrupt",
        "source_dir": "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/src",
        "version": "1.6.0",
        "license": "MIT",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/Argument_None",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/Change_Interval",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/ISR_16_Timers_Array",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/ISR_16_Timers_Array_Complex",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/ISR_16_Timers_Array_OneShot",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/ISR_RPM_Measure",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/RPM_Measure",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/SwitchDebounce",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/TimerInterruptTest",
          "/home/louis/Arduino/libraries/ESP8266TimerInterrupt/examples/multiFileProject"
        ],
        "provides_includes": [
          "ESP8266TimerInterrupt.h",
          "ESP8266_ISR_Timer.h",
          "ESP8266_ISR_Timer.hpp"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "SimplyAtomic",
        "author": "Aaron Wisner \u003cdaw268@cornell.edu\u003e",
        "maintainer": "Aaron Wisner \u003cdaw268@cornell.edu\u003e",
        "sentence": "A library for creating portable atomic blocks within your program",
        "paragraph": "A portable way to do atomic operations. Exposes portable macros that automatically save the interrupt register, disable interrupts, perform your atomic operations, then restore the register to its saved value.",
        "website": "https://github.com/wizard97/SimplyAtomic",
        "category": "Timing",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/SimplyAtomic",
        "source_dir": "/home/louis/Arduino/libraries/SimplyAtomic",
        "version": "1.0",
        "license": "Unspecified",
        "properties": {},
        "location": "user",
        "layout": "flat",
        "provides_includes": [
          "SimplyAtomic.h"
        ],
        "compatible_with": {}
      }
    },
    {
      "library": {
        "name": "SinricPro_Generic",
        "author": "Boris Jaeger \u003csivar2311@gmail.com\u003e, Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "maintainer": "Khoi Hoang \u003ckhoih.prog@gmail.com\u003e",
        "sentence": "Library for https://sinric.pro - Simple way to connect your device to Alexa",
        "paragraph": "Simple way to control your IoT development boards like ESP8226, ESP32, WT32_ETH01, Arduino SAMD21, Adafruit SAMD21, SAMD51, nRF52, STM32F/L/H/G/WB/MP1, Teensy, SAM DUE, RP2040-based (Nano_RP2040_Connect, RASPBERRY_PI_PICO), Portenta_H7 using W5x00/ENC28J60 Ethernet, WiFiNINA or RTL8720DN, Portenta Ethernet, with Amazon Alexa or Google Home.",
        "website": "https://github.com/khoih-prog/SinricPro_Generic",
        "category": "Communication",
        "architectures": [
          "*"
        ],
        "install_dir": "/home/louis/Arduino/libraries/SinricPro_Generic",
        "source_dir": "/home/louis/Arduino/libraries/SinricPro_Generic/src",
        "version": "2.8.5",
        "license": "CC-BY-SA",
        "properties": {},
        "location": "user",
        "layout": "recursive",
        "examples": [
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/AirQualitySensor/AirQualitySensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/AirQualitySensor/AirQualitySensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Camera",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Light/Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Light/Light_FastLED_WS2812",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Light/RGB_LED_Stripe_5050",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Lock/Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Lock/Lock_with_feedback",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Switch/MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Switch/MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Switch/MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Switch/Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Switch/WeMosD1_mini_relay_shield",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/doorbell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/ESP/temperaturesensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/Generic_Ethernet_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/Generic_Ethernet_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/Generic_WiFiNINA_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/Generic_WiFiNINA_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/SAMD_Ethernet_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/SAMD_Ethernet_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/SAMD_WiFiNINA_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/SAMD_WiFiNINA_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/WIO_Terminal_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/WIO_Terminal_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/nRF52_Ethernet_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/nRF52_Ethernet_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/nRF52_WiFiNINA_AQSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/AirQualitySensor/nRF52_WiFiNINA_AQSensor_GP2Y1014AU0F",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/Generic_Ethernet_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/Generic_WiFiNINA_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/RP2040_WiFiNINA_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/SAMD_Ethernet_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/SAMD_WiFiNINA_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/WIO_Terminal_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/nRF52_Ethernet_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Blinds/nRF52_WiFiNINA_Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/Generic_Ethernet_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/Generic_WiFiNINA_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/SAMD_Ethernet_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/SAMD_WiFiNINA_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/WIO_Terminal_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/nRF52_Ethernet_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/ContactSensor/nRF52_WiFiNINA_ContactSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/Generic_Ethernet_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/Generic_WiFiNINA_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/SAMD_Ethernet_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/SAMD_WiFiNINA_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/WIO_Terminal_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/nRF52_Ethernet_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DimSwitch/nRF52_WiFiNINA_DimSwitch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/Generic_Ethernet_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/Generic_WiFiNINA_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/SAMD_Ethernet_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/SAMD_WiFiNINA_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/WIO_Terminal_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/nRF52_Ethernet_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/DoorBell/nRF52_WiFiNINA_DoorBell",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/Generic_Ethernet_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/Generic_WiFiNINA_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/SAMD_Ethernet_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/SAMD_WiFiNINA_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/WIO_Terminal_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/nRF52_Ethernet_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Fan/nRF52_WiFiNINA_Fan",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/Generic_Ethernet_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/Generic_WiFiNINA_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/SAMD_Ethernet_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/SAMD_WiFiNINA_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/WIO_Terminal_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/nRF52_Ethernet_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/GarageDoor/nRF52_WiFiNINA_GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/Generic_Ethernet_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/Generic_WiFiNINA_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/SAMD_Ethernet_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/SAMD_WiFiNINA_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/WIO_Terminal_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/nRF52_Ethernet_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Light/nRF52_WiFiNINA_Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/Generic_Ethernet_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/Generic_WiFiNINA_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/SAMD_Ethernet_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/SAMD_WiFiNINA_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/WIO_Terminal_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/nRF52_Ethernet_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Lock/nRF52_WiFiNINA_Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/Generic_Ethernet_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/Generic_WiFiNINA_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/SAMD_Ethernet_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/SAMD_WiFiNINA_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/WIO_Terminal_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/nRF52_Ethernet_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/MotionSensor/nRF52_WiFiNINA_MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/Generic_Ethernet_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/Generic_WiFiNINA_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/SAMD_Ethernet_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/SAMD_WiFiNINA_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/WIO_Terminal_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/nRF52_Ethernet_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/PowerSensor/nRF52_WiFiNINA_PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/Generic_Ethernet_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/Generic_WiFiNINA_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/SAMD_Ethernet_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/SAMD_WiFiNINA_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/WIO_Terminal_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/nRF52_Ethernet_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Speaker/nRF52_WiFiNINA_Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_Ethernet/Generic_Ethernet_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_Ethernet/Generic_Ethernet_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_Ethernet/Generic_Ethernet_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_Ethernet/Generic_Ethernet_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_WiFiNINA/Generic_WiFiNINA_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_WiFiNINA/Generic_WiFiNINA_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_WiFiNINA/Generic_WiFiNINA_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/Generic_WiFiNINA/Generic_WiFiNINA_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_Ethernet/SAMD_Ethernet_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_Ethernet/SAMD_Ethernet_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_Ethernet/SAMD_Ethernet_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_Ethernet/SAMD_Ethernet_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_WiFiNINA/SAMD_WiFiNINA_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_WiFiNINA/SAMD_WiFiNINA_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_WiFiNINA/SAMD_WiFiNINA_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/SAMD_WiFiNINA/SAMD_WiFiNINA_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/WIO_Terminal/WIOT_MultiSwitch_LCD",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/WIO_Terminal/WIO_Terminal_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/WIO_Terminal/WIO_Terminal_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/WIO_Terminal/WIO_Terminal_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/WIO_Terminal/WIO_Terminal_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_Ethernet/nRF52_Ethernet_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_Ethernet/nRF52_Ethernet_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_Ethernet/nRF52_Ethernet_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_Ethernet/nRF52_Ethernet_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_WiFiNINA/nRF52_WiFiNINA_MultiSwitch_advance",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_WiFiNINA/nRF52_WiFiNINA_MultiSwitch_beginner",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_WiFiNINA/nRF52_WiFiNINA_MultiSwitch_intermediate",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Switch/nRF52_WiFiNINA/nRF52_WiFiNINA_Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/Generic_Ethernet_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/Generic_WiFiNINA_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/SAMD_Ethernet_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/SAMD_WiFiNINA_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/WIO_Terminal_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/nRF52_Ethernet_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TV/nRF52_WiFiNINA_TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/Generic_Ethernet_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/Generic_WiFiNINA_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/SAMD_Ethernet_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/SAMD_WiFiNINA_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/WIO_Terminal_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/nRF52_Ethernet_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/TemperatureSensor/nRF52_WiFiNINA_TemperatureSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/Generic_Ethernet_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/Generic_WiFiNINA_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/SAMD_Ethernet_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/SAMD_WiFiNINA_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/WIO_Terminal_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/nRF52_Ethernet_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/Generic/Thermostat/nRF52_WiFiNINA_Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Blinds",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/GarageDoor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Light/Light",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Light/Light_FastLED_WS2812",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Light/RGB_LED_Stripe_5050",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Lock/Lock",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Lock/Lock_with_feedback",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/MotionSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/PowerSensor",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Speaker",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Switch/Switch",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/TV",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/Thermostat",
          "/home/louis/Arduino/libraries/SinricPro_Generic/examples/WT32_ETH01/temperaturesensor"
        ],
        "provides_includes": [
          "SinricPro_Generic.h"
        ],
        "compatible_with": {}
      }
    }
  ]
}
